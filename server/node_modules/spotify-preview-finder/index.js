require('dotenv').config();
const axios = require('axios');
const cheerio = require('cheerio');
const SpotifyWebApi = require('spotify-web-api-node');

// Create an instance of the SpotifyWebApi client
function createSpotifyApi() {
  const clientId = process.env.SPOTIFY_CLIENT_ID;
  const clientSecret = process.env.SPOTIFY_CLIENT_SECRET;

  if (!clientId || !clientSecret) {
    throw new Error('SPOTIFY_CLIENT_ID and SPOTIFY_CLIENT_SECRET environment variables are required');
  }

  return new SpotifyWebApi({
    clientId: clientId,
    clientSecret: clientSecret
  });
}

// Function to fetch Spotify preview links from the provided URL
async function getSpotifyLinks(url) {
  try {
    const response = await axios.get(url);
    const html = response.data;
    const $ = cheerio.load(html);
    const scdnLinks = new Set();

    $('*').each((i, element) => {
      const attrs = element.attribs;
      Object.values(attrs).forEach(value => {
        if (value && value.includes('p.scdn.co')) {
          scdnLinks.add(value);
        }
      });
    });

    return Array.from(scdnLinks);
  } catch (error) {
    throw new Error(`Failed to fetch preview URLs: ${error.message}`);
  }
}

/**
 * Fetch track info and its preview URLs using track ID
 * @param {string} trackId - The Spotify track ID
 * @returns {Promise<Object>} - Object containing success status and track preview URLs
 */
async function getTrackPreviewById(trackId) {
  try {
    if (!trackId) {
      throw new Error('Track ID is required');
    }

    const spotifyApi = createSpotifyApi();
    const data = await spotifyApi.clientCredentialsGrant();
    spotifyApi.setAccessToken(data.body['access_token']);
    
    // Fetch track by its Spotify track ID
    const trackData = await spotifyApi.getTrack(trackId);
    
    if (!trackData.body) {
      return {
        success: false,
        error: 'Track not found',
        results: []
      };
    }

    // Get the track URL and fetch preview URLs from it
    const spotifyUrl = trackData.body.external_urls.spotify;
    const previewUrls = await getSpotifyLinks(spotifyUrl);

    return {
      success: true,
      results: [
        {
          name: `${trackData.body.name} - ${trackData.body.artists.map(artist => artist.name).join(', ')}`,
          spotifyUrl: spotifyUrl,
          previewUrls: previewUrls
        }
      ]
    };
  } catch (error) {
    return {
      success: false,
      error: error.message,
      results: []
    };
  }
}

module.exports = getTrackPreviewById;